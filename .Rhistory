edge_list <- read.csv("/Users/oleteutloff/Desktop/Data/edge_list.csv")
View(edge_list)
#%#%#%#%#%#%#%#%#%#%
library(tidyverse)    # numerous data wrangling packages
library(data.table)   # quick data loading
library(igraph)       # Network package
library(network)      # Network package
library(ggnetwork)    # Plotting networks
library(RColorBrewer) # Nice colours for plots
library(ggpubr)       # Arrange multiple plots
# Useful commands
'%!in%' <- function(x,y)!('%in%'(x,y)) # opposite of %in% command
options(stringsAsFactors = FALSE)
View(edge_list)
edge_list <- edge_list %>% select(tag1,tag2,lift)
coocNet<-network(edge_list,
matrix.type='edgelist',
directed=F,
ignore.eval=FALSE,  # confusingly, this tells it to include edge weights
names.eval=c("lift")  # names for the edge weights
)
write_graph(coocNet, "/Users/oleteutloff/Desktop/Data/cooc_network.graphml", format = "graphml")
class(coocNet)
View(edge_list)
#%#%#%#%#%#%#%#%#%#%
# Loading packages
#%#%#%#%#%#%#%#%#%#%
library(tidyverse)    # numerous data wrangling packages
library(data.table)   # quick data loading
library(lubridate)    # Working with dates
library(arules)       # Association rules (for network links)
library(widyr)        # Super fast functions for long to wide operations
# Useful commands
'%!in%' <- function(x,y)!('%in%'(x,y)) # opposite of %in% command
options(stringsAsFactors = FALSE)
#%#%#%#%#%#%#%#%#%#%
# Load data and simple data cleaning
#%#%#%#%#%#%#%#%#%#%
# Read the huge data frame using the data.table package
df <- fread("/Users/oleteutloff/Desktop/Data/Stack_overflow/2018-08-13 Contributions.csv")
# Filter those rows that actually have tags
df <- df %>% filter(tags != "")
# keep only relevant columns
df <- df %>% dplyr::select(id, creation_date, Country, tags)
# extract year from date
df$year <- format(as.Date(df$creation_date),"%Y")
# Limit to 2017 (for now) - Not necessary anymore
#df <- df %>% filter(year == 2017)
# exclude duplicate ids: there 132 ids that are not unique. I exclude them
df <- df %>% distinct()
# Still duplicates remaining
ids_duplicate <- as.data.frame(table(df$id)) %>% filter(Freq > 1) %>% select(Var1)
df <- df %>% filter(id %!in% ids_duplicate$Var1)
####################################
#### Extract and manipulate tags ###
####################################
# transform tags from string into list of individual tags
df$tags_list <- list(strsplit(df$tags,"\\|"))
# Break the list into one large vector
tags <- unlist(df$tags_list)
# Add the number of tech-tags per post to the post dataframe
df$number_tags <- sapply(df$tags_list,length)
# Turn df into a data frame (it used to be a 'data.table')
df <- data.frame(df)
# Use the broken-up tag list and the number of categories per firm to create one large panel dataframe
df.expanded <- df[rep(row.names(df), df$number_tags),]
df.expanded$tags <- tags
### Exclude all tags that do not appear in our wikipedia matching table
# final solution when wiki-matching is complete
#df_wiki <- fread("/Users/oleteutloff/Desktop/Data/wikipedia_matching/wiki_match.csv")
#df_wiki <- df_wiki %>% filter(Wikipedia != "")
# df.expanded <- df.expanded %>% filter(tags %in% df_wiki$tag)
# provisional solution - Some how we lose 47 technology tags
df_wiki <- fread("/Users/oleteutloff/Desktop/Data/wikipedia_matching/wiki_provisional.csv")
df.expanded <- df.expanded %>% filter(tags %in% df_wiki$tag)
############################################
### collect tag (the future nodes in the network) level information
############################################
### Extract in which year a technology appeared for the first time
node_info <- df.expanded %>% group_by(tags) %>% summarise(min(year)) %>% rename(year_appeared="min(year)")
# table(first_appearance$`min(year)`) # number of new tags decreases over time.
### Extract in which year a technology appeared for the first time
node_info <- df.expanded %>% group_by(tags) %>% summarise(min(year)) %>% rename(year_appeared="min(year)")
view(node_info)
# include total occurance of each tag
node_info$total_count <- df_matrix %>% count(tags)
# include total occurance of each tag
node_info$total_count <- df_expanded %>% count(tags)
View(df.expanded)
# include total occurance of each tag
node_info$total_count <- df.expanded %>% count(tags)
View(node_info)
View(node_info)
# include total occurance of each tag
node_info$total_count <- df.expanded %>% count(tags) %>% select(total_count.n)
# include total occurance of each tag
node_info$total_count <- df.expanded %>% count(tags) %>% select(total_count)
View(node_info)
# include total occurance of each tag
total_count <- df.expanded %>% count(tags) %>% select(total_count)
# include total occurance of each tag
node_info$total_count <- df.expanded %>% count(tags)
View(node_info)
node_info <- node_info %>% select(tags, year_appeared, total_count.n) %>% rename(total_count=total_count.n)
node_info <- node_info %>% select(tags, year_appeared, total_count) %>% rename(total_count=total_count.n)
node_info <- node_info %>% select(tags, year_appeared, total_count) %>% rename(total_count=total_count)
View(node_info)
### Extract in which year a technology appeared for the first time
node_info <- df.expanded %>% group_by(tags) %>% summarise(min(year)) %>% rename(year_appeared="min(year)")
# include total occurance of each tag
total_count <- df.expanded %>% count(tags)
View(total_count)
View(node_info)
node_info <- node_info %>% left_join(total_count, by = c("tags" = "tags"))
View(node_info)
node_info <- node_info  %>% rename(total_count=n)
# Save this table for use in the network
write.csv(node_info,"/Users/oleteutloff/Desktop/Data/node_info.csv", row.names = FALSE)
View(node_info)
#%#%#%#%#%#%#%#%#%#%
# Loading packages
#%#%#%#%#%#%#%#%#%#%
library(tidyverse)    # numerous data wrangling packages
library(data.table)   # quick data loading
library(igraph)       # Network package
library(network)      # Network package
library(ggnetwork)    # Plotting networks
library(RColorBrewer) # Nice colours for plots
library(ggpubr)       # Arrange multiple plots
# Useful commands
'%!in%' <- function(x,y)!('%in%'(x,y)) # opposite of %in% command
options(stringsAsFactors = FALSE)
node_info <- read.csv("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/tag_first_appearance.csv")
node_info <- read.csv("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/node_info.csv")
View(node_info)
edge_list <- read.csv("/Users/oleteutloff/Desktop/Data/edge_list.csv")
View(edge_list)
nodes <- node_info
edges <- edge_list %>% select(tag1,tag2,co_occurance_count,lift)
# Creating the network
coocNet <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
View(nodes)
View(edges)
class(coocNet)
write_graph(coocNet, "/Users/oleteutloff/Desktop/Data/cooc_network.graphml", format = "graphml")
node_info <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/node_info.csv")
#%#%#%#%#%#%#%#%#%#%
library(tidyverse)    # numerous data wrangling packages
library(data.table)   # quick data loading
library(igraph)       # Network package
library(network)      # Network package
library(ggnetwork)    # Plotting networks
library(RColorBrewer) # Nice colours for plots
library(ggpubr)       # Arrange multiple plots
# Useful commands
'%!in%' <- function(x,y)!('%in%'(x,y)) # opposite of %in% command
options(stringsAsFactors = FALSE)
node_info <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/node_info.csv")
# unclear why this is not working at the moment. Data is not importated correctly. Seems the data structures is changes to different encoding while upload or something like this
edge_list <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/edge_list.csv", fileEncoding="UTF-16LE")
# unclear why this is not working at the moment. Data is not importated correctly. Seems the data structures is changes to different encoding while upload or something like this
edge_list <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/edge_list.csv")
View(edge_list)
path = getwd()
node_info <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/node_info.csv")
edge_list <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/edge_list.csv")
#%#%#%#%#%#%#%#%#%#%
# Create Network
#%#%#%#%#%#%#%#%#%#%
# Creating dedicated dataframes for nodes and edges including node attributes and optional edge weights
nodes <- node_info
edges <- edge_list %>% select(tag1,tag2,co_occurance_count,lift)
# Creating the network
coocNet <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
class(coocNet)
#%#%#%#%#%#%#%#%#%#%
# Export for use in Gephi
#%#%#%#%#%#%#%#%#%#%
# Set your path
path = getwd()
nodes <- node_info
edges <- edge_list %>% select(tag1,tag2,co_occurance_count,lift)
# Creating the network
coocNet <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
class(coocNet)
#%#%#%#%#%#%#%#%#%#%
# Export for use in Gephi
#%#%#%#%#%#%#%#%#%#%
# Set your path
path = getwd()
write_graph(coocNet, path +"cooc_network.graphml", format = "graphml")
write_graph(coocNet, c(path,"cooc_network.graphml, format = "graphml")
write_graph(coocNet, c(path,"cooc_network.graphml), format = "graphml")
write_graph(coocNet, path= path+"cooc_network.graphml", format = "graphml")
write_graph(file=coocNet, path= path+"cooc_network.graphml", format = "graphml")
# Set your path
path = getwd() + "cooc_network.graphml"
# Set your path
path = c(getwd() + "cooc_network.graphml")
# Set your path
path = c(getwd(),"cooc_network.graphml")
path
# Set your path
path = paste(getwd(),"/cooc_network.graphml", sep="")
path
write_graph(oocNet, path, format = "graphml")
write_graph(coocNet, path, format = "graphml")
library(tidyverse)    # numerous data wrangling packages
library(data.table)   # quick data loading
library(igraph)       # Network package
library(network)      # Network package
library(ggnetwork)    # Plotting networks
library(RColorBrewer) # Nice colours for plots
library(ggpubr)       # Arrange multiple plots
# Useful commands
'%!in%' <- function(x,y)!('%in%'(x,y)) # opposite of %in% command
options(stringsAsFactors = FALSE)
#%#%#%#%#%#%#%#%#%#%
# Load data directly from github
#%#%#%#%#%#%#%#%#%#%
node_info <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/node_info.csv")
edge_list <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/edge_list.csv")
View(node_info)
node_info$value <- 1
node_info %>% pivot_wider(names_from = year_appeared, values_from = value)
node_info$year <- node_info$year_appeared
node_info %>% pivot_wider(names_from = year, values_from = value)
node_info %>% pivot_wider(names_from = year, values_from = value) %>% mutate_at(vars(starts_with("20")), ~replace(., is.na(.), 0))
View(node_info)
node_info <- node_info %>% pivot_wider(names_from = year, values_from = value) %>% mutate_at(vars(starts_with("20")), ~replace(., is.na(.), 0))
View(node_info)
node_info <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/node_info.csv")
node_info <- node_info %>% arrange(year_appeared)
View(node_info)
node_info <- fread("https://raw.githubusercontent.com/QuantomOle/The-Technology-Space-and-Digital-Development/main/data/node_info.csv")
node_info$value <- 1
node_info$year <- node_info$year_appeared
node_info %>% arrange(year) %>% pivot_wider(names_from = year, values_from = value) %>% mutate_at(vars(starts_with("20")), ~replace(., is.na(.), 0))
node_info <- node_info %>% arrange(year) %>% pivot_wider(names_from = year, values_from = value) %>% mutate_at(vars(starts_with("20")), ~replace(., is.na(.), 0))
# Creating dedicated dataframes for nodes and edges including node attributes and optional edge weights
nodes <- node_info
edges <- edge_list %>% select(tag1,tag2,co_occurance_count,lift)
# Creating the network
coocNet <- graph_from_data_frame(d=edges, vertices=nodes, directed=FALSE)
class(coocNet)
clusterlouvain <- cluster_louvain(coocNet)
View(clusterlouvain)
V(coocNet)
membership(clusterlouvain)
# Assign community membership as an attribute
V(coocNet)$louvain_community <- membership(clusterlouvain)
getwd()
# Set your path via setting your working directory (setwd()) or choose any other path where to save the network
path = paste(getwd(),"/cooc_network.graphml", sep="")
write_graph(coocNet, path, format = "graphml")
